name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  issue_comment:
    types: [created]
  workflow_dispatch: # Allow manual triggering

env:
  GO_VERSION: '1.24.1'

jobs:
  # Check if workflow should run (skip for external contributors unless triggered by maintainer comment)
  check-trigger:
    name: Check Trigger
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
    - name: Check trigger conditions
      id: check
      run: |
        # Always run on push/PR from repository owner or maintainers
        if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "✅ Running CI for push/manual trigger"
          exit 0
        fi
        
        # For pull requests, check if author is konojunya or if triggered by comment
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Allow if PR author is konojunya
          if [[ "${{ github.event.pull_request.user.login }}" == "konojunya" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "✅ Running CI for konojunya PR"
            exit 0
          fi
          
          # Skip for external contributors (will be triggered by comment instead)
          echo "should-run=false" >> $GITHUB_OUTPUT
          echo "⏭️ Skipping CI for external contributor PR (use comment to trigger)"
          exit 0
        fi
        
        # For issue comments, check if commenter is konojunya and comment contains trigger
        if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
          # Only run on PR comments
          if [[ "${{ github.event.issue.pull_request }}" == "" ]]; then
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "⏭️ Comment not on PR"
            exit 0
          fi
          
          # Check if commenter is konojunya
          if [[ "${{ github.event.comment.user.login }}" == "konojunya" ]]; then
            # Check if comment contains trigger phrase
            if [[ "${{ github.event.comment.body }}" == *"/run-ci"* ]]; then
              echo "should-run=true" >> $GITHUB_OUTPUT
              echo "✅ Running CI triggered by konojunya comment"
              exit 0
            fi
          fi
          
          echo "should-run=false" >> $GITHUB_OUTPUT
          echo "⏭️ Comment trigger conditions not met"
          exit 0
        fi
        
        # Default: don't run
        echo "should-run=false" >> $GITHUB_OUTPUT

  # Linting and formatting check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Check formatting
      run: |
        make fmt
        if [[ -n $(git diff) ]]; then
          echo "Code is not formatted properly"
          git diff
          exit 1
        fi

    - name: Install golangci-lint
      run: make lint-install

    - name: Run linter
      run: make lint

    - name: Run go vet
      run: make vet

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install gosec
      run: make security-install

    - name: Run security scan
      run: make security
      continue-on-error: true # Security issues shouldn't block CI for now

  # Test matrix across multiple Go versions and platforms
  test:
    name: Test
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24.1']
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.go-version }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run tests
      run: make test

    - name: Run tests with coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24.1'
      run: make test-coverage

    - name: Upload coverage reports to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24.1'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [check-trigger, lint, test]
    if: needs.check-trigger.outputs.should-run == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Build binary
      run: make build

    - name: Run example conversion
      run: make example

    - name: Validate generated schema
      run: |
        # Check that schema file was generated
        if [[ ! -f "example-output.ts" ]]; then
          echo "Example output file was not generated"
          exit 1
        fi
        
        # Check that schema contains expected content
        if ! grep -q "import.*drizzle-orm/pg-core" example-output.ts; then
          echo "Generated schema missing Drizzle imports"
          exit 1
        fi
        
        if ! grep -q "export const.*pgTable" example-output.ts; then
          echo "Generated schema missing table exports"
          exit 1
        fi
        
        echo "✅ Integration test passed - schema generated successfully"

  # Build verification across platforms
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [check-trigger, lint, test]
    if: needs.check-trigger.outputs.should-run == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Build for all platforms
      run: make build-all

    - name: Verify binaries
      run: |
        echo "Checking generated binaries..."
        ls -la bin/
        
        # Verify binaries exist
        if [[ ! -f "bin/sql-to-drizzle-schema-linux-amd64" ]]; then
          echo "Linux AMD64 binary missing"
          exit 1
        fi
        
        if [[ ! -f "bin/sql-to-drizzle-schema-darwin-amd64" ]]; then
          echo "macOS AMD64 binary missing"
          exit 1
        fi
        
        if [[ ! -f "bin/sql-to-drizzle-schema-windows-amd64.exe" ]]; then
          echo "Windows AMD64 binary missing"
          exit 1
        fi
        
        echo "✅ All platform binaries built successfully"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ github.sha }}
        path: bin/
        retention-days: 30

  # Dependency vulnerability check
  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: govulncheck ./...

  # Performance benchmarks (optional)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For comment triggers, checkout the PR branch
        ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run benchmarks
      run: make bench

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [check-trigger, lint, security, test, integration, build, vulnerability-check]
    if: always() && needs.check-trigger.outputs.should-run == 'true'
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "Lint job failed"
          exit 1
        fi
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Test job failed"
          exit 1
        fi
        if [[ "${{ needs.integration.result }}" != "success" ]]; then
          echo "Integration job failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build job failed"
          exit 1
        fi
        if [[ "${{ needs.vulnerability-check.result }}" != "success" ]]; then
          echo "Vulnerability check failed"
          exit 1
        fi
        
        echo "✅ All CI jobs completed successfully!"

    - name: Report status
      run: |
        echo "🎉 CI Pipeline completed successfully!"
        echo "📊 Jobs status:"
        echo "  - Lint: ${{ needs.lint.result }}"
        echo "  - Security: ${{ needs.security.result }}"
        echo "  - Test: ${{ needs.test.result }}"
        echo "  - Integration: ${{ needs.integration.result }}"
        echo "  - Build: ${{ needs.build.result }}"
        echo "  - Vulnerability Check: ${{ needs.vulnerability-check.result }}"