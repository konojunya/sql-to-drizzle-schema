name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24.1'

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0"
          exit 1
        fi

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run full CI pipeline
      run: make ci

  # Build release binaries
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Build release binaries
      run: make release-prep

    - name: Create checksums
      run: |
        cd bin
        sha256sum * > checksums.txt
        echo "Generated checksums:"
        cat checksums.txt

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries-${{ needs.validate.outputs.version }}
        path: bin/
        retention-days: 90

  # Create GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-binaries-${{ needs.validate.outputs.version }}
        path: bin/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Get the previous tag for changelog generation
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n 1)
        
        echo "Generating release notes for $VERSION (since $PREVIOUS_TAG)"
        
        # Create release notes
        cat > release_notes.md << EOF
        # Release $VERSION
        
        ## What's New
        
        ### Features
        $(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION --grep="feat" --grep="add" --grep="implement" || echo "- No new features in this release")
        
        ### Bug Fixes
        $(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION --grep="fix" --grep="bug" || echo "- No bug fixes in this release")
        
        ### Other Changes
        $(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION --grep="docs" --grep="test" --grep="refactor" --grep="style" || echo "- No other changes in this release")
        
        ## Installation
        
        ### Using Go
        \`\`\`bash
        go install github.com/konojunya/sql-to-drizzle-schema@$VERSION
        \`\`\`
        
        ### Download Binary
        Download the appropriate binary for your platform from the assets below.
        
        ### Verify Installation
        \`\`\`bash
        sql-to-drizzle-schema --help
        \`\`\`
        
        ## Usage Example
        
        \`\`\`bash
        # Convert PostgreSQL schema to Drizzle ORM
        sql-to-drizzle-schema ./schema.sql -o drizzle-schema.ts
        
        # Specify dialect explicitly
        sql-to-drizzle-schema ./schema.sql --dialect postgresql -o schema.ts
        \`\`\`
        
        ## Platform Support
        
        This release includes binaries for:
        - Linux (AMD64, ARM64)
        - macOS (AMD64, ARM64)
        - Windows (AMD64)
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/konojunya/sql-to-drizzle-schema/compare/$PREVIOUS_TAG...$VERSION
        
        ---
        
        Generated by [sql-to-drizzle-schema](https://github.com/konojunya/sql-to-drizzle-schema) release automation ðŸ¤–
        EOF
        
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: Release ${{ needs.validate.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.release_notes_file }}
        draft: false
        prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
        files: |
          bin/*
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to Go module proxy
  publish:
    name: Publish to Go Modules
    runs-on: ubuntu-latest
    needs: [validate, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate.outputs.version }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Trigger Go module proxy
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        MODULE="github.com/konojunya/sql-to-drizzle-schema"
        
        echo "Triggering Go module proxy for $MODULE@$VERSION"
        
        # Make a request to the Go module proxy to cache the module
        curl -f "https://proxy.golang.org/$MODULE/@v/$VERSION.info" || true
        curl -f "https://proxy.golang.org/$MODULE/@v/$VERSION.mod" || true
        curl -f "https://proxy.golang.org/$MODULE/@v/$VERSION.zip" || true
        
        echo "âœ… Module should now be available via 'go install $MODULE@$VERSION'"

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: github.event_name == 'push'  # Only update docs on tag push, not manual dispatch
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update installation instructions
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Update README.md with latest version
        sed -i "s|go install github.com/konojunya/sql-to-drizzle-schema@.*|go install github.com/konojunya/sql-to-drizzle-schema@$VERSION|g" README.md
        
        # Check if changes were made
        if git diff --quiet; then
          echo "No documentation updates needed"
        else
          echo "Updated documentation with version $VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "docs: update installation instructions for $VERSION"
          git push
        fi

  # Post-release notifications
  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, release, publish]
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: Release Summary
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        RELEASE_URL="https://github.com/konojunya/sql-to-drizzle-schema/releases/tag/$VERSION"
        
        echo "ðŸŽ‰ Release $VERSION completed successfully!"
        echo "ðŸ“¦ Release URL: $RELEASE_URL"
        echo "ðŸš€ Available for installation via: go install github.com/konojunya/sql-to-drizzle-schema@$VERSION"
        
        # Create a summary for the GitHub Actions summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # ðŸŽ‰ Release $VERSION Published!
        
        ## Release Information
        - **Version**: $VERSION
        - **Release URL**: [$RELEASE_URL]($RELEASE_URL)
        - **Installation**: \`go install github.com/konojunya/sql-to-drizzle-schema@$VERSION\`
        
        ## Build Status
        - Validation: ${{ needs.validate.result }}
        - Build: ${{ needs.build.result }}
        - Release: ${{ needs.release.result }}
        - Publish: ${{ needs.publish.result }}
        
        ## What's Next?
        - The release is now available on GitHub
        - Go module proxy should be updated
        - Users can install via \`go install\`
        - Binaries are available for download
        
        ---
        Generated by sql-to-drizzle-schema release automation ðŸ¤–
        EOF